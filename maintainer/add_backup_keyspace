#!/usr/bin/env python3

import os
import pprint
import shutil
import sys
import yaml

from datetime import datetime


class MyDumper(yaml.Dumper):
    def increase_indent(self, flow=False, indentless=False):
        return super(MyDumper, self).increase_indent(flow, False)


def modify_conf(file_name: str, backup_keyspace: str):
    with open(file_name, "r") as file:
        conf = yaml.load(file, Loader=yaml.SafeLoader)
    run_options = conf.setdefault("run_options", {})
    backup_keyspaces = run_options.setdefault("backup_keyspaces", [])
    if backup_keyspace not in backup_keyspaces:
        backup_keyspaces.append(backup_keyspace)

    backup_suffix = datetime.now().strftime("%Y%m%d%H%M%S")
    shutil.copyfile(file_name, file_name + "." + backup_suffix)
    with open(file_name, "w") as file:
        yaml.dump(conf, file, sort_keys=False, indent=4, Dumper=MyDumper, default_flow_style=False)


def main(argv: list):
    if len(argv) < 3:
        usage(os.path.basename(argv[0]))
    modify_conf(argv[1], argv[2])


def usage(command: str):
    print(f"Usage: {command} <dbdozer_yaml_file> <keyspace>")
    sys.exit(1)


if __name__ == "__main__":
    main(sys.argv)
