/*
 * Copyright (C) 2025 Isima, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: _bios/data.proto

#include "_bios/data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace isima {
namespace bios {
namespace models {
namespace proto {
PROTOBUF_CONSTEXPR Uuid::Uuid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/uint64_t{0u}
  , /*decltype(_impl_.lo_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UuidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidDefaultTypeInternal() {}
  union {
    Uuid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidDefaultTypeInternal _Uuid_default_instance_;
PROTOBUF_CONSTEXPR Dimensions::Dimensions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DimensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionsDefaultTypeInternal() {}
  union {
    Dimensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionsDefaultTypeInternal _Dimensions_default_instance_;
PROTOBUF_CONSTEXPR OrderBy::OrderBy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reverse_)*/false
  , /*decltype(_impl_.case_sensitive_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderByDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderByDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderByDefaultTypeInternal() {}
  union {
    OrderBy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderByDefaultTypeInternal _OrderBy_default_instance_;
PROTOBUF_CONSTEXPR Metric::Metric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.of_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.as_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.function_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;
PROTOBUF_CONSTEXPR ColumnDefinition::ColumnDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.index_in_value_array_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColumnDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnDefinitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnDefinitionDefaultTypeInternal() {}
  union {
    ColumnDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnDefinitionDefaultTypeInternal _ColumnDefinition_default_instance_;
PROTOBUF_CONSTEXPR AttributeList::AttributeList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeListDefaultTypeInternal() {}
  union {
    AttributeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeListDefaultTypeInternal _AttributeList_default_instance_;
PROTOBUF_CONSTEXPR Record::Record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.long_values_)*/{}
  , /*decltype(_impl_._long_values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.double_values_)*/{}
  , /*decltype(_impl_.string_values_)*/{}
  , /*decltype(_impl_.blob_values_)*/{}
  , /*decltype(_impl_.boolean_values_)*/{}
  , /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordDefaultTypeInternal() {}
  union {
    Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordDefaultTypeInternal _Record_default_instance_;
PROTOBUF_CONSTEXPR InsertRequest::InsertRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.schema_version_)*/int64_t{0}
  , /*decltype(_impl_.content_rep_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertRequestDefaultTypeInternal() {}
  union {
    InsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertSuccessResponse::InsertSuccessResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.insert_timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertSuccessResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertSuccessResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertSuccessResponseDefaultTypeInternal() {}
  union {
    InsertSuccessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertSuccessResponseDefaultTypeInternal _InsertSuccessResponse_default_instance_;
PROTOBUF_CONSTEXPR InsertBulkRequest::InsertBulkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_)*/{}
  , /*decltype(_impl_.signal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_version_)*/int64_t{0}
  , /*decltype(_impl_.content_rep_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertBulkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBulkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBulkRequestDefaultTypeInternal() {}
  union {
    InsertBulkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBulkRequestDefaultTypeInternal _InsertBulkRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertBulkSuccessResponse::InsertBulkSuccessResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertBulkSuccessResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBulkSuccessResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBulkSuccessResponseDefaultTypeInternal() {}
  union {
    InsertBulkSuccessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBulkSuccessResponseDefaultTypeInternal _InsertBulkSuccessResponse_default_instance_;
PROTOBUF_CONSTEXPR InsertSuccessOrError::InsertSuccessOrError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_error_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.insert_timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertSuccessOrErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertSuccessOrErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertSuccessOrErrorDefaultTypeInternal() {}
  union {
    InsertSuccessOrError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertSuccessOrErrorDefaultTypeInternal _InsertSuccessOrError_default_instance_;
PROTOBUF_CONSTEXPR InsertBulkErrorResponse::InsertBulkErrorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_with_error_)*/{}
  , /*decltype(_impl_.server_error_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertBulkErrorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBulkErrorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBulkErrorResponseDefaultTypeInternal() {}
  union {
    InsertBulkErrorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBulkErrorResponseDefaultTypeInternal _InsertBulkErrorResponse_default_instance_;
PROTOBUF_CONSTEXPR SlidingWindow::SlidingWindow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slide_interval_)*/int64_t{0}
  , /*decltype(_impl_.window_slides_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SlidingWindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlidingWindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlidingWindowDefaultTypeInternal() {}
  union {
    SlidingWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlidingWindowDefaultTypeInternal _SlidingWindow_default_instance_;
PROTOBUF_CONSTEXPR TumblingWindow::TumblingWindow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.window_size_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TumblingWindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TumblingWindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TumblingWindowDefaultTypeInternal() {}
  union {
    TumblingWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TumblingWindowDefaultTypeInternal _TumblingWindow_default_instance_;
PROTOBUF_CONSTEXPR Window::Window(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.window_type_)*/0
  , /*decltype(_impl_.window_details_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindowDefaultTypeInternal() {}
  union {
    Window _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindowDefaultTypeInternal _Window_default_instance_;
PROTOBUF_CONSTEXPR SelectQuery::SelectQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.windows_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.where_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.group_by_)*/nullptr
  , /*decltype(_impl_.order_by_)*/nullptr
  , /*decltype(_impl_.start_time_)*/int64_t{0}
  , /*decltype(_impl_.end_time_)*/int64_t{0}
  , /*decltype(_impl_.distinct_)*/false
  , /*decltype(_impl_.on_the_fly_)*/false
  , /*decltype(_impl_.limit_)*/0} {}
struct SelectQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectQueryDefaultTypeInternal() {}
  union {
    SelectQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectQueryDefaultTypeInternal _SelectQuery_default_instance_;
PROTOBUF_CONSTEXPR SelectRequest::SelectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectRequestDefaultTypeInternal() {}
  union {
    SelectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectRequestDefaultTypeInternal _SelectRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryResult::QueryResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_.window_begin_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryResultDefaultTypeInternal() {}
  union {
    QueryResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryResultDefaultTypeInternal _QueryResult_default_instance_;
PROTOBUF_CONSTEXPR SelectQueryResponse::SelectQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.definitions_)*/{}
  , /*decltype(_impl_.is_windowed_response_)*/false
  , /*decltype(_impl_.request_query_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectQueryResponseDefaultTypeInternal() {}
  union {
    SelectQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectQueryResponseDefaultTypeInternal _SelectQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR SelectResponse::SelectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectResponseDefaultTypeInternal() {}
  union {
    SelectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectResponseDefaultTypeInternal _SelectResponse_default_instance_;
}  // namespace proto
}  // namespace models
}  // namespace bios
}  // namespace isima
}  // namespace com
static ::_pb::Metadata file_level_metadata__5fbios_2fdata_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors__5fbios_2fdata_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors__5fbios_2fdata_2eproto = nullptr;

const uint32_t TableStruct__5fbios_2fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Uuid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Uuid, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Uuid, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Dimensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Dimensions, _impl_.dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::OrderBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::OrderBy, _impl_.by_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::OrderBy, _impl_.reverse_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::OrderBy, _impl_.case_sensitive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Metric, _impl_.function_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Metric, _impl_.of_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Metric, _impl_.as_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Metric, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::ColumnDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::ColumnDefinition, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::ColumnDefinition, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::ColumnDefinition, _impl_.index_in_value_array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::AttributeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::AttributeList, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _impl_.long_values_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _impl_.double_values_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _impl_.string_values_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _impl_.blob_values_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Record, _impl_.boolean_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertRequest, _impl_.content_rep_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertRequest, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertRequest, _impl_.schema_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessResponse, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessResponse, _impl_.insert_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkRequest, _impl_.content_rep_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkRequest, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkRequest, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkRequest, _impl_.schema_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkSuccessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkSuccessResponse, _impl_.responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessOrError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessOrError, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessOrError, _impl_.insert_timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessOrError, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertSuccessOrError, _impl_.server_error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkErrorResponse, _impl_.server_error_code_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkErrorResponse, _impl_.server_error_message_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::InsertBulkErrorResponse, _impl_.results_with_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SlidingWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SlidingWindow, _impl_.slide_interval_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SlidingWindow, _impl_.window_slides_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::TumblingWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::TumblingWindow, _impl_.window_size_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Window, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Window, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Window, _impl_.window_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::Window, _impl_.window_details_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.distinct_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.where_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.group_by_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.windows_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.order_by_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQuery, _impl_.on_the_fly_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectRequest, _impl_.queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::QueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::QueryResult, _impl_.window_begin_time_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::QueryResult, _impl_.records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQueryResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQueryResponse, _impl_.definitions_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQueryResponse, _impl_.is_windowed_response_),
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectQueryResponse, _impl_.request_query_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::isima::bios::models::proto::SelectResponse, _impl_.responses_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::isima::bios::models::proto::Uuid)},
  { 8, -1, -1, sizeof(::com::isima::bios::models::proto::Dimensions)},
  { 15, -1, -1, sizeof(::com::isima::bios::models::proto::OrderBy)},
  { 24, -1, -1, sizeof(::com::isima::bios::models::proto::Metric)},
  { 34, -1, -1, sizeof(::com::isima::bios::models::proto::ColumnDefinition)},
  { 43, -1, -1, sizeof(::com::isima::bios::models::proto::AttributeList)},
  { 50, -1, -1, sizeof(::com::isima::bios::models::proto::Record)},
  { 63, -1, -1, sizeof(::com::isima::bios::models::proto::InsertRequest)},
  { 72, -1, -1, sizeof(::com::isima::bios::models::proto::InsertSuccessResponse)},
  { 80, -1, -1, sizeof(::com::isima::bios::models::proto::InsertBulkRequest)},
  { 90, -1, -1, sizeof(::com::isima::bios::models::proto::InsertBulkSuccessResponse)},
  { 97, -1, -1, sizeof(::com::isima::bios::models::proto::InsertSuccessOrError)},
  { 107, -1, -1, sizeof(::com::isima::bios::models::proto::InsertBulkErrorResponse)},
  { 116, -1, -1, sizeof(::com::isima::bios::models::proto::SlidingWindow)},
  { 124, -1, -1, sizeof(::com::isima::bios::models::proto::TumblingWindow)},
  { 131, -1, -1, sizeof(::com::isima::bios::models::proto::Window)},
  { 141, 159, -1, sizeof(::com::isima::bios::models::proto::SelectQuery)},
  { 171, -1, -1, sizeof(::com::isima::bios::models::proto::SelectRequest)},
  { 178, -1, -1, sizeof(::com::isima::bios::models::proto::QueryResult)},
  { 186, -1, -1, sizeof(::com::isima::bios::models::proto::SelectQueryResponse)},
  { 196, -1, -1, sizeof(::com::isima::bios::models::proto::SelectResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::isima::bios::models::proto::_Uuid_default_instance_._instance,
  &::com::isima::bios::models::proto::_Dimensions_default_instance_._instance,
  &::com::isima::bios::models::proto::_OrderBy_default_instance_._instance,
  &::com::isima::bios::models::proto::_Metric_default_instance_._instance,
  &::com::isima::bios::models::proto::_ColumnDefinition_default_instance_._instance,
  &::com::isima::bios::models::proto::_AttributeList_default_instance_._instance,
  &::com::isima::bios::models::proto::_Record_default_instance_._instance,
  &::com::isima::bios::models::proto::_InsertRequest_default_instance_._instance,
  &::com::isima::bios::models::proto::_InsertSuccessResponse_default_instance_._instance,
  &::com::isima::bios::models::proto::_InsertBulkRequest_default_instance_._instance,
  &::com::isima::bios::models::proto::_InsertBulkSuccessResponse_default_instance_._instance,
  &::com::isima::bios::models::proto::_InsertSuccessOrError_default_instance_._instance,
  &::com::isima::bios::models::proto::_InsertBulkErrorResponse_default_instance_._instance,
  &::com::isima::bios::models::proto::_SlidingWindow_default_instance_._instance,
  &::com::isima::bios::models::proto::_TumblingWindow_default_instance_._instance,
  &::com::isima::bios::models::proto::_Window_default_instance_._instance,
  &::com::isima::bios::models::proto::_SelectQuery_default_instance_._instance,
  &::com::isima::bios::models::proto::_SelectRequest_default_instance_._instance,
  &::com::isima::bios::models::proto::_QueryResult_default_instance_._instance,
  &::com::isima::bios::models::proto::_SelectQueryResponse_default_instance_._instance,
  &::com::isima::bios::models::proto::_SelectResponse_default_instance_._instance,
};

const char descriptor_table_protodef__5fbios_2fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020_bios/data.proto\022\033com.isima.bios.model"
  "s.proto\"\036\n\004Uuid\022\n\n\002hi\030\001 \001(\004\022\n\n\002lo\030\002 \001(\004\""
  " \n\nDimensions\022\022\n\ndimensions\030\001 \003(\t\">\n\007Ord"
  "erBy\022\n\n\002by\030\001 \001(\t\022\017\n\007reverse\030\002 \001(\010\022\026\n\016cas"
  "e_sensitive\030\003 \001(\010\"m\n\006Metric\022=\n\010function\030"
  "\001 \001(\0162+.com.isima.bios.models.proto.Metr"
  "icFunction\022\n\n\002of\030\002 \001(\t\022\n\n\002as\030\003 \001(\t\022\014\n\004na"
  "me\030\004 \001(\t\"x\n\020ColumnDefinition\0228\n\004type\030\001 \001"
  "(\0162*.com.isima.bios.models.proto.Attribu"
  "teType\022\014\n\004name\030\002 \001(\t\022\034\n\024index_in_value_a"
  "rray\030\003 \001(\005\"#\n\rAttributeList\022\022\n\nattribute"
  "s\030\001 \003(\t\"\235\001\n\006Record\022\020\n\010event_id\030\001 \001(\014\022\021\n\t"
  "timestamp\030\002 \001(\003\022\023\n\013long_values\030\n \003(\003\022\025\n\r"
  "double_values\030\013 \003(\001\022\025\n\rstring_values\030\014 \003"
  "(\t\022\023\n\013blob_values\030\r \003(\014\022\026\n\016boolean_value"
  "s\030\016 \003(\010\"\245\001\n\rInsertRequest\022G\n\013content_rep"
  "\030\001 \001(\01622.com.isima.bios.models.proto.Con"
  "tentRepresentation\0223\n\006record\030\002 \001(\0132#.com"
  ".isima.bios.models.proto.Record\022\026\n\016schem"
  "a_version\030\n \001(\003\"C\n\025InsertSuccessResponse"
  "\022\020\n\010event_id\030\001 \001(\014\022\030\n\020insert_timestamp\030\002"
  " \001(\003\"\271\001\n\021InsertBulkRequest\022G\n\013content_re"
  "p\030\001 \001(\01622.com.isima.bios.models.proto.Co"
  "ntentRepresentation\0223\n\006record\030\002 \003(\0132#.co"
  "m.isima.bios.models.proto.Record\022\016\n\006sign"
  "al\030\005 \001(\t\022\026\n\016schema_version\030\n \001(\003\"b\n\031Inse"
  "rtBulkSuccessResponse\022E\n\tresponses\030\001 \003(\013"
  "22.com.isima.bios.models.proto.InsertSuc"
  "cessResponse\"t\n\024InsertSuccessOrError\022\020\n\010"
  "event_id\030\001 \001(\t\022\030\n\020insert_timestamp\030\002 \001(\003"
  "\022\025\n\rerror_message\030\n \001(\t\022\031\n\021server_error_"
  "code\030\013 \001(\t\"\241\001\n\027InsertBulkErrorResponse\022\031"
  "\n\021server_error_code\030\001 \001(\t\022\034\n\024server_erro"
  "r_message\030\002 \001(\t\022M\n\022results_with_error\030\004 "
  "\003(\01321.com.isima.bios.models.proto.Insert"
  "SuccessOrError\">\n\rSlidingWindow\022\026\n\016slide"
  "_interval\030\001 \001(\003\022\025\n\rwindow_slides\030\002 \001(\005\"("
  "\n\016TumblingWindow\022\026\n\016window_size_ms\030\001 \001(\003"
  "\"\330\001\n\006Window\022<\n\013window_type\030\001 \001(\0162\'.com.i"
  "sima.bios.models.proto.WindowType\022=\n\007sli"
  "ding\030\n \001(\0132*.com.isima.bios.models.proto"
  ".SlidingWindowH\000\022\?\n\010tumbling\030\013 \001(\0132+.com"
  ".isima.bios.models.proto.TumblingWindowH"
  "\000B\020\n\016window_details\"\263\003\n\013SelectQuery\022\022\n\ns"
  "tart_time\030\001 \001(\003\022\020\n\010end_time\030\002 \001(\003\022\020\n\010dis"
  "tinct\030\n \001(\010\022>\n\nattributes\030\013 \001(\0132*.com.is"
  "ima.bios.models.proto.AttributeList\0224\n\007m"
  "etrics\030\014 \003(\0132#.com.isima.bios.models.pro"
  "to.Metric\022\014\n\004from\030\017 \001(\t\022\r\n\005where\030\024 \001(\t\0229"
  "\n\010group_by\030\036 \001(\0132\'.com.isima.bios.models"
  ".proto.Dimensions\0224\n\007windows\030( \003(\0132#.com"
  ".isima.bios.models.proto.Window\0226\n\010order"
  "_by\0302 \001(\0132$.com.isima.bios.models.proto."
  "OrderBy\022\022\n\005limit\030< \001(\005H\000\210\001\001\022\022\n\non_the_fl"
  "y\030F \001(\010B\010\n\006_limit\"J\n\rSelectRequest\0229\n\007qu"
  "eries\030\001 \003(\0132(.com.isima.bios.models.prot"
  "o.SelectQuery\"^\n\013QueryResult\022\031\n\021window_b"
  "egin_time\030\001 \001(\003\0224\n\007records\030\n \003(\0132#.com.i"
  "sima.bios.models.proto.Record\"\312\001\n\023Select"
  "QueryResponse\0226\n\004data\030\001 \003(\0132(.com.isima."
  "bios.models.proto.QueryResult\022B\n\013definit"
  "ions\030\002 \003(\0132-.com.isima.bios.models.proto"
  ".ColumnDefinition\022\034\n\024is_windowed_respons"
  "e\030\003 \001(\010\022\031\n\021request_query_num\030\004 \001(\005\"U\n\016Se"
  "lectResponse\022C\n\tresponses\030\001 \003(\01320.com.is"
  "ima.bios.models.proto.SelectQueryRespons"
  "e*\256\003\n\016MetricFunction\022\007\n\003SUM\020\000\022\t\n\005COUNT\020\001"
  "\022\007\n\003MIN\020\002\022\007\n\003MAX\020\003\022\010\n\004LAST\020\004\022\007\n\003AVG\020\005\022\014\n"
  "\010VARIANCE\020\006\022\n\n\006STDDEV\020\007\022\014\n\010SKEWNESS\020\010\022\014\n"
  "\010KURTOSIS\020\t\022\010\n\004SUM2\020\n\022\010\n\004SUM3\020\013\022\010\n\004SUM4\020"
  "\014\022\n\n\006MEDIAN\020\037\022\t\n\005P0_01\020 \022\010\n\004P0_1\020!\022\006\n\002P1"
  "\020\"\022\007\n\003P10\020#\022\007\n\003P25\020$\022\007\n\003P50\020%\022\007\n\003P75\020&\022\007"
  "\n\003P90\020\'\022\007\n\003P99\020(\022\t\n\005P99_9\020)\022\n\n\006P99_99\020*\022"
  "\021\n\rDISTINCTCOUNT\020=\022\t\n\005DCLB1\020>\022\t\n\005DCUB1\020\?"
  "\022\t\n\005DCLB2\020@\022\t\n\005DCUB2\020A\022\t\n\005DCLB3\020B\022\t\n\005DCU"
  "B3\020C\022\016\n\nNUMSAMPLES\020Q\022\024\n\020SAMPLINGFRACTION"
  "\020R\022\020\n\014SAMPLECOUNTS\020S\022\014\n\010SYNOPSIS\020e*9\n\025Co"
  "ntentRepresentation\022\n\n\006NATIVE\020\000\022\007\n\003CSV\020\001"
  "\022\013\n\007UNTYPED\020\002*Y\n\rAttributeType\022\013\n\007UNKNOW"
  "N\020\000\022\013\n\007INTEGER\020\001\022\013\n\007DECIMAL\020\002\022\n\n\006STRING\020"
  "\003\022\010\n\004BLOB\020\004\022\013\n\007BOOLEAN\020\005*H\n\nWindowType\022\021"
  "\n\rGLOBAL_WINDOW\020\000\022\022\n\016SLIDING_WINDOW\020\001\022\023\n"
  "\017TUMBLING_WINDOW\020\002B\'\n\032io.isima.bios.mode"
  "ls.protoB\tDataProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table__5fbios_2fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table__5fbios_2fdata_2eproto = {
    false, false, 3347, descriptor_table_protodef__5fbios_2fdata_2eproto,
    "_bios/data.proto",
    &descriptor_table__5fbios_2fdata_2eproto_once, nullptr, 0, 21,
    schemas, file_default_instances, TableStruct__5fbios_2fdata_2eproto::offsets,
    file_level_metadata__5fbios_2fdata_2eproto, file_level_enum_descriptors__5fbios_2fdata_2eproto,
    file_level_service_descriptors__5fbios_2fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table__5fbios_2fdata_2eproto_getter() {
  return &descriptor_table__5fbios_2fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy__5fbios_2fdata_2eproto(&descriptor_table__5fbios_2fdata_2eproto);
namespace com {
namespace isima {
namespace bios {
namespace models {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricFunction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table__5fbios_2fdata_2eproto);
  return file_level_enum_descriptors__5fbios_2fdata_2eproto[0];
}
bool MetricFunction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 81:
    case 82:
    case 83:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentRepresentation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table__5fbios_2fdata_2eproto);
  return file_level_enum_descriptors__5fbios_2fdata_2eproto[1];
}
bool ContentRepresentation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table__5fbios_2fdata_2eproto);
  return file_level_enum_descriptors__5fbios_2fdata_2eproto[2];
}
bool AttributeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table__5fbios_2fdata_2eproto);
  return file_level_enum_descriptors__5fbios_2fdata_2eproto[3];
}
bool WindowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Uuid::_Internal {
 public:
};

Uuid::Uuid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.Uuid)
}
Uuid::Uuid(const Uuid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Uuid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){}
    , decltype(_impl_.lo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hi_, &from._impl_.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lo_) -
    reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.lo_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.Uuid)
}

inline void Uuid::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){uint64_t{0u}}
    , decltype(_impl_.lo_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Uuid::~Uuid() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.Uuid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uuid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Uuid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Uuid::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.Uuid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lo_) -
      reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.lo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uuid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uuid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.Uuid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hi(), target);
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.Uuid)
  return target;
}

size_t Uuid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.Uuid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hi());
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uuid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Uuid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uuid::GetClassData() const { return &_class_data_; }


void Uuid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Uuid*>(&to_msg);
  auto& from = static_cast<const Uuid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.Uuid)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hi() != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  if (from._internal_lo() != 0) {
    _this->_internal_set_lo(from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uuid::CopyFrom(const Uuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.Uuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {
  return true;
}

void Uuid::InternalSwap(Uuid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uuid, _impl_.lo_)
      + sizeof(Uuid::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(Uuid, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Uuid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[0]);
}

// ===================================================================

class Dimensions::_Internal {
 public:
};

Dimensions::Dimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.Dimensions)
}
Dimensions::Dimensions(const Dimensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dimensions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.Dimensions)
}

inline void Dimensions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Dimensions::~Dimensions() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.Dimensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dimensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedPtrField();
}

void Dimensions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.Dimensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dimensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dimensions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.Dimensions.dimensions"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dimensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.Dimensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimensions = 1;
  for (int i = 0, n = this->_internal_dimensions_size(); i < n; i++) {
    const auto& s = this->_internal_dimensions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.Dimensions.dimensions");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.Dimensions)
  return target;
}

size_t Dimensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.Dimensions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dimensions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dimensions_.size());
  for (int i = 0, n = _impl_.dimensions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dimensions_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dimensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dimensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dimensions::GetClassData() const { return &_class_data_; }


void Dimensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dimensions*>(&to_msg);
  auto& from = static_cast<const Dimensions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.Dimensions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dimensions::CopyFrom(const Dimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.Dimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimensions::IsInitialized() const {
  return true;
}

void Dimensions::InternalSwap(Dimensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[1]);
}

// ===================================================================

class OrderBy::_Internal {
 public:
};

OrderBy::OrderBy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.OrderBy)
}
OrderBy::OrderBy(const OrderBy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderBy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , decltype(_impl_.reverse_){}
    , decltype(_impl_.case_sensitive_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_by().empty()) {
    _this->_impl_.by_.Set(from._internal_by(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reverse_, &from._impl_.reverse_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.case_sensitive_) -
    reinterpret_cast<char*>(&_impl_.reverse_)) + sizeof(_impl_.case_sensitive_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.OrderBy)
}

inline void OrderBy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , decltype(_impl_.reverse_){false}
    , decltype(_impl_.case_sensitive_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderBy::~OrderBy() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.OrderBy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderBy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.by_.Destroy();
}

void OrderBy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.OrderBy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_.ClearToEmpty();
  ::memset(&_impl_.reverse_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.case_sensitive_) -
      reinterpret_cast<char*>(&_impl_.reverse_)) + sizeof(_impl_.case_sensitive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string by = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.OrderBy.by"));
        } else
          goto handle_unusual;
        continue;
      // bool reverse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool case_sensitive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.case_sensitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderBy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.OrderBy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string by = 1;
  if (!this->_internal_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_by().data(), static_cast<int>(this->_internal_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.OrderBy.by");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_by(), target);
  }

  // bool reverse = 2;
  if (this->_internal_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_reverse(), target);
  }

  // bool case_sensitive = 3;
  if (this->_internal_case_sensitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_case_sensitive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.OrderBy)
  return target;
}

size_t OrderBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.OrderBy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string by = 1;
  if (!this->_internal_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_by());
  }

  // bool reverse = 2;
  if (this->_internal_reverse() != 0) {
    total_size += 1 + 1;
  }

  // bool case_sensitive = 3;
  if (this->_internal_case_sensitive() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderBy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderBy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderBy::GetClassData() const { return &_class_data_; }


void OrderBy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderBy*>(&to_msg);
  auto& from = static_cast<const OrderBy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.OrderBy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_by().empty()) {
    _this->_internal_set_by(from._internal_by());
  }
  if (from._internal_reverse() != 0) {
    _this->_internal_set_reverse(from._internal_reverse());
  }
  if (from._internal_case_sensitive() != 0) {
    _this->_internal_set_case_sensitive(from._internal_case_sensitive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBy::CopyFrom(const OrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy::IsInitialized() const {
  return true;
}

void OrderBy::InternalSwap(OrderBy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.by_, lhs_arena,
      &other->_impl_.by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBy, _impl_.case_sensitive_)
      + sizeof(OrderBy::_impl_.case_sensitive_)
      - PROTOBUF_FIELD_OFFSET(OrderBy, _impl_.reverse_)>(
          reinterpret_cast<char*>(&_impl_.reverse_),
          reinterpret_cast<char*>(&other->_impl_.reverse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[2]);
}

// ===================================================================

class Metric::_Internal {
 public:
};

Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.of_){}
    , decltype(_impl_.as_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.function_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.of_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.of_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_of().empty()) {
    _this->_impl_.of_.Set(from._internal_of(), 
      _this->GetArenaForAllocation());
  }
  _impl_.as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.as_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_as().empty()) {
    _this->_impl_.as_.Set(from._internal_as(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.function_ = from._impl_.function_;
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.Metric)
}

inline void Metric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.of_){}
    , decltype(_impl_.as_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.function_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.of_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.of_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.as_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.of_.Destroy();
  _impl_.as_.Destroy();
  _impl_.name_.Destroy();
}

void Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.of_.ClearToEmpty();
  _impl_.as_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.function_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.isima.bios.models.proto.MetricFunction function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_function(static_cast<::com::isima::bios::models::proto::MetricFunction>(val));
        } else
          goto handle_unusual;
        continue;
      // string of = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_of();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.Metric.of"));
        } else
          goto handle_unusual;
        continue;
      // string as = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_as();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.Metric.as"));
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.Metric.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.isima.bios.models.proto.MetricFunction function = 1;
  if (this->_internal_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_function(), target);
  }

  // string of = 2;
  if (!this->_internal_of().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_of().data(), static_cast<int>(this->_internal_of().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.Metric.of");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_of(), target);
  }

  // string as = 3;
  if (!this->_internal_as().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_as().data(), static_cast<int>(this->_internal_as().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.Metric.as");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_as(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.Metric.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string of = 2;
  if (!this->_internal_of().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_of());
  }

  // string as = 3;
  if (!this->_internal_as().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_as());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .com.isima.bios.models.proto.MetricFunction function = 1;
  if (this->_internal_function() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_function());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metric::GetClassData() const { return &_class_data_; }


void Metric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.Metric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_of().empty()) {
    _this->_internal_set_of(from._internal_of());
  }
  if (!from._internal_as().empty()) {
    _this->_internal_set_as(from._internal_as());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_function() != 0) {
    _this->_internal_set_function(from._internal_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.of_, lhs_arena,
      &other->_impl_.of_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.as_, lhs_arena,
      &other->_impl_.as_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.function_, other->_impl_.function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[3]);
}

// ===================================================================

class ColumnDefinition::_Internal {
 public:
};

ColumnDefinition::ColumnDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.ColumnDefinition)
}
ColumnDefinition::ColumnDefinition(const ColumnDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.index_in_value_array_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_in_value_array_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_in_value_array_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.ColumnDefinition)
}

inline void ColumnDefinition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.index_in_value_array_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ColumnDefinition::~ColumnDefinition() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.ColumnDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ColumnDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.ColumnDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_in_value_array_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_in_value_array_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.isima.bios.models.proto.AttributeType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::com::isima::bios::models::proto::AttributeType>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.ColumnDefinition.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 index_in_value_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_in_value_array_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.ColumnDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.isima.bios.models.proto.AttributeType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.ColumnDefinition.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 index_in_value_array = 3;
  if (this->_internal_index_in_value_array() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_index_in_value_array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.ColumnDefinition)
  return target;
}

size_t ColumnDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.ColumnDefinition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .com.isima.bios.models.proto.AttributeType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 index_in_value_array = 3;
  if (this->_internal_index_in_value_array() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index_in_value_array());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnDefinition::GetClassData() const { return &_class_data_; }


void ColumnDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnDefinition*>(&to_msg);
  auto& from = static_cast<const ColumnDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.ColumnDefinition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_index_in_value_array() != 0) {
    _this->_internal_set_index_in_value_array(from._internal_index_in_value_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnDefinition::CopyFrom(const ColumnDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.ColumnDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnDefinition::IsInitialized() const {
  return true;
}

void ColumnDefinition::InternalSwap(ColumnDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnDefinition, _impl_.index_in_value_array_)
      + sizeof(ColumnDefinition::_impl_.index_in_value_array_)
      - PROTOBUF_FIELD_OFFSET(ColumnDefinition, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[4]);
}

// ===================================================================

class AttributeList::_Internal {
 public:
};

AttributeList::AttributeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.AttributeList)
}
AttributeList::AttributeList(const AttributeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){from._impl_.attributes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.AttributeList)
}

inline void AttributeList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttributeList::~AttributeList() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.AttributeList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
}

void AttributeList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.AttributeList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.AttributeList.attributes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.AttributeList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string attributes = 1;
  for (int i = 0, n = this->_internal_attributes_size(); i < n; i++) {
    const auto& s = this->_internal_attributes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.AttributeList.attributes");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.AttributeList)
  return target;
}

size_t AttributeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.AttributeList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attributes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributes_.size());
  for (int i = 0, n = _impl_.attributes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attributes_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeList::GetClassData() const { return &_class_data_; }


void AttributeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeList*>(&to_msg);
  auto& from = static_cast<const AttributeList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.AttributeList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeList::CopyFrom(const AttributeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.AttributeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeList::IsInitialized() const {
  return true;
}

void AttributeList::InternalSwap(AttributeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[5]);
}

// ===================================================================

class Record::_Internal {
 public:
};

Record::Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.long_values_){from._impl_.long_values_}
    , /*decltype(_impl_._long_values_cached_byte_size_)*/{0}
    , decltype(_impl_.double_values_){from._impl_.double_values_}
    , decltype(_impl_.string_values_){from._impl_.string_values_}
    , decltype(_impl_.blob_values_){from._impl_.blob_values_}
    , decltype(_impl_.boolean_values_){from._impl_.boolean_values_}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.Record)
}

inline void Record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.long_values_){arena}
    , /*decltype(_impl_._long_values_cached_byte_size_)*/{0}
    , decltype(_impl_.double_values_){arena}
    , decltype(_impl_.string_values_){arena}
    , decltype(_impl_.blob_values_){arena}
    , decltype(_impl_.boolean_values_){arena}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.long_values_.~RepeatedField();
  _impl_.double_values_.~RepeatedField();
  _impl_.string_values_.~RepeatedPtrField();
  _impl_.blob_values_.~RepeatedPtrField();
  _impl_.boolean_values_.~RepeatedField();
  _impl_.event_id_.Destroy();
}

void Record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.Record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.long_values_.Clear();
  _impl_.double_values_.Clear();
  _impl_.string_values_.Clear();
  _impl_.blob_values_.Clear();
  _impl_.boolean_values_.Clear();
  _impl_.event_id_.ClearToEmpty();
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 long_values = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_long_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_long_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_values = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 89) {
          _internal_add_double_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string string_values = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.Record.string_values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes blob_values = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blob_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bool boolean_values = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_boolean_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_boolean_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.Record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes event_id = 1;
  if (!this->_internal_event_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated int64 long_values = 10;
  {
    int byte_size = _impl_._long_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_long_values(), byte_size, target);
    }
  }

  // repeated double double_values = 11;
  if (this->_internal_double_values_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_double_values(), target);
  }

  // repeated string string_values = 12;
  for (int i = 0, n = this->_internal_string_values_size(); i < n; i++) {
    const auto& s = this->_internal_string_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.Record.string_values");
    target = stream->WriteString(12, s, target);
  }

  // repeated bytes blob_values = 13;
  for (int i = 0, n = this->_internal_blob_values_size(); i < n; i++) {
    const auto& s = this->_internal_blob_values(i);
    target = stream->WriteBytes(13, s, target);
  }

  // repeated bool boolean_values = 14;
  if (this->_internal_boolean_values_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_boolean_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.Record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 long_values = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.long_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._long_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_values = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string string_values = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.string_values_.size());
  for (int i = 0, n = _impl_.string_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.string_values_.Get(i));
  }

  // repeated bytes blob_values = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blob_values_.size());
  for (int i = 0, n = _impl_.blob_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.blob_values_.Get(i));
  }

  // repeated bool boolean_values = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_boolean_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // bytes event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_event_id());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Record::GetClassData() const { return &_class_data_; }


void Record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Record*>(&to_msg);
  auto& from = static_cast<const Record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.Record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.long_values_.MergeFrom(from._impl_.long_values_);
  _this->_impl_.double_values_.MergeFrom(from._impl_.double_values_);
  _this->_impl_.string_values_.MergeFrom(from._impl_.string_values_);
  _this->_impl_.blob_values_.MergeFrom(from._impl_.blob_values_);
  _this->_impl_.boolean_values_.MergeFrom(from._impl_.boolean_values_);
  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.long_values_.InternalSwap(&other->_impl_.long_values_);
  _impl_.double_values_.InternalSwap(&other->_impl_.double_values_);
  _impl_.string_values_.InternalSwap(&other->_impl_.string_values_);
  _impl_.blob_values_.InternalSwap(&other->_impl_.blob_values_);
  _impl_.boolean_values_.InternalSwap(&other->_impl_.boolean_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[6]);
}

// ===================================================================

class InsertRequest::_Internal {
 public:
  static const ::com::isima::bios::models::proto::Record& record(const InsertRequest* msg);
};

const ::com::isima::bios::models::proto::Record&
InsertRequest::_Internal::record(const InsertRequest* msg) {
  return *msg->_impl_.record_;
}
InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){nullptr}
    , decltype(_impl_.schema_version_){}
    , decltype(_impl_.content_rep_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::com::isima::bios::models::proto::Record(*from._impl_.record_);
  }
  ::memcpy(&_impl_.schema_version_, &from._impl_.schema_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.content_rep_) -
    reinterpret_cast<char*>(&_impl_.schema_version_)) + sizeof(_impl_.content_rep_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.InsertRequest)
}

inline void InsertRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){nullptr}
    , decltype(_impl_.schema_version_){int64_t{0}}
    , decltype(_impl_.content_rep_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.InsertRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.record_;
}

void InsertRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.InsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.schema_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.content_rep_) -
      reinterpret_cast<char*>(&_impl_.schema_version_)) + sizeof(_impl_.content_rep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.isima.bios.models.proto.ContentRepresentation content_rep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_rep(static_cast<::com::isima::bios::models::proto::ContentRepresentation>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.isima.bios.models.proto.Record record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 schema_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.schema_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.InsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.isima.bios.models.proto.ContentRepresentation content_rep = 1;
  if (this->_internal_content_rep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_content_rep(), target);
  }

  // .com.isima.bios.models.proto.Record record = 2;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // int64 schema_version = 10;
  if (this->_internal_schema_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_schema_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.InsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.isima.bios.models.proto.Record record = 2;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // int64 schema_version = 10;
  if (this->_internal_schema_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_schema_version());
  }

  // .com.isima.bios.models.proto.ContentRepresentation content_rep = 1;
  if (this->_internal_content_rep() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_content_rep());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRequest::GetClassData() const { return &_class_data_; }


void InsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertRequest*>(&to_msg);
  auto& from = static_cast<const InsertRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.InsertRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::com::isima::bios::models::proto::Record::MergeFrom(
        from._internal_record());
  }
  if (from._internal_schema_version() != 0) {
    _this->_internal_set_schema_version(from._internal_schema_version());
  }
  if (from._internal_content_rep() != 0) {
    _this->_internal_set_content_rep(from._internal_content_rep());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.content_rep_)
      + sizeof(InsertRequest::_impl_.content_rep_)
      - PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[7]);
}

// ===================================================================

class InsertSuccessResponse::_Internal {
 public:
};

InsertSuccessResponse::InsertSuccessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.InsertSuccessResponse)
}
InsertSuccessResponse::InsertSuccessResponse(const InsertSuccessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertSuccessResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.insert_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.insert_timestamp_ = from._impl_.insert_timestamp_;
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.InsertSuccessResponse)
}

inline void InsertSuccessResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.insert_timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertSuccessResponse::~InsertSuccessResponse() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.InsertSuccessResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertSuccessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
}

void InsertSuccessResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertSuccessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.InsertSuccessResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.insert_timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertSuccessResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 insert_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.insert_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertSuccessResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.InsertSuccessResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes event_id = 1;
  if (!this->_internal_event_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // int64 insert_timestamp = 2;
  if (this->_internal_insert_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_insert_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.InsertSuccessResponse)
  return target;
}

size_t InsertSuccessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.InsertSuccessResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_event_id());
  }

  // int64 insert_timestamp = 2;
  if (this->_internal_insert_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_insert_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertSuccessResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertSuccessResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertSuccessResponse::GetClassData() const { return &_class_data_; }


void InsertSuccessResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertSuccessResponse*>(&to_msg);
  auto& from = static_cast<const InsertSuccessResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.InsertSuccessResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_insert_timestamp() != 0) {
    _this->_internal_set_insert_timestamp(from._internal_insert_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertSuccessResponse::CopyFrom(const InsertSuccessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.InsertSuccessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertSuccessResponse::IsInitialized() const {
  return true;
}

void InsertSuccessResponse::InternalSwap(InsertSuccessResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  swap(_impl_.insert_timestamp_, other->_impl_.insert_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertSuccessResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[8]);
}

// ===================================================================

class InsertBulkRequest::_Internal {
 public:
};

InsertBulkRequest::InsertBulkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.InsertBulkRequest)
}
InsertBulkRequest::InsertBulkRequest(const InsertBulkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBulkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){from._impl_.record_}
    , decltype(_impl_.signal_){}
    , decltype(_impl_.schema_version_){}
    , decltype(_impl_.content_rep_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signal().empty()) {
    _this->_impl_.signal_.Set(from._internal_signal(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.schema_version_, &from._impl_.schema_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.content_rep_) -
    reinterpret_cast<char*>(&_impl_.schema_version_)) + sizeof(_impl_.content_rep_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.InsertBulkRequest)
}

inline void InsertBulkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){arena}
    , decltype(_impl_.signal_){}
    , decltype(_impl_.schema_version_){int64_t{0}}
    , decltype(_impl_.content_rep_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertBulkRequest::~InsertBulkRequest() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.InsertBulkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBulkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_.~RepeatedPtrField();
  _impl_.signal_.Destroy();
}

void InsertBulkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBulkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.InsertBulkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_.Clear();
  _impl_.signal_.ClearToEmpty();
  ::memset(&_impl_.schema_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.content_rep_) -
      reinterpret_cast<char*>(&_impl_.schema_version_)) + sizeof(_impl_.content_rep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBulkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.isima.bios.models.proto.ContentRepresentation content_rep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_rep(static_cast<::com::isima::bios::models::proto::ContentRepresentation>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.isima.bios.models.proto.Record record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.InsertBulkRequest.signal"));
        } else
          goto handle_unusual;
        continue;
      // int64 schema_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.schema_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBulkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.InsertBulkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.isima.bios.models.proto.ContentRepresentation content_rep = 1;
  if (this->_internal_content_rep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_content_rep(), target);
  }

  // repeated .com.isima.bios.models.proto.Record record = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string signal = 5;
  if (!this->_internal_signal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal().data(), static_cast<int>(this->_internal_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.InsertBulkRequest.signal");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signal(), target);
  }

  // int64 schema_version = 10;
  if (this->_internal_schema_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_schema_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.InsertBulkRequest)
  return target;
}

size_t InsertBulkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.InsertBulkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.Record record = 2;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->_impl_.record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string signal = 5;
  if (!this->_internal_signal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal());
  }

  // int64 schema_version = 10;
  if (this->_internal_schema_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_schema_version());
  }

  // .com.isima.bios.models.proto.ContentRepresentation content_rep = 1;
  if (this->_internal_content_rep() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_content_rep());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBulkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBulkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBulkRequest::GetClassData() const { return &_class_data_; }


void InsertBulkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBulkRequest*>(&to_msg);
  auto& from = static_cast<const InsertBulkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.InsertBulkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_.MergeFrom(from._impl_.record_);
  if (!from._internal_signal().empty()) {
    _this->_internal_set_signal(from._internal_signal());
  }
  if (from._internal_schema_version() != 0) {
    _this->_internal_set_schema_version(from._internal_schema_version());
  }
  if (from._internal_content_rep() != 0) {
    _this->_internal_set_content_rep(from._internal_content_rep());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBulkRequest::CopyFrom(const InsertBulkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.InsertBulkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBulkRequest::IsInitialized() const {
  return true;
}

void InsertBulkRequest::InternalSwap(InsertBulkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.record_.InternalSwap(&other->_impl_.record_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signal_, lhs_arena,
      &other->_impl_.signal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertBulkRequest, _impl_.content_rep_)
      + sizeof(InsertBulkRequest::_impl_.content_rep_)
      - PROTOBUF_FIELD_OFFSET(InsertBulkRequest, _impl_.schema_version_)>(
          reinterpret_cast<char*>(&_impl_.schema_version_),
          reinterpret_cast<char*>(&other->_impl_.schema_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBulkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[9]);
}

// ===================================================================

class InsertBulkSuccessResponse::_Internal {
 public:
};

InsertBulkSuccessResponse::InsertBulkSuccessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.InsertBulkSuccessResponse)
}
InsertBulkSuccessResponse::InsertBulkSuccessResponse(const InsertBulkSuccessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBulkSuccessResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){from._impl_.responses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.InsertBulkSuccessResponse)
}

inline void InsertBulkSuccessResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InsertBulkSuccessResponse::~InsertBulkSuccessResponse() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.InsertBulkSuccessResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBulkSuccessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responses_.~RepeatedPtrField();
}

void InsertBulkSuccessResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBulkSuccessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.InsertBulkSuccessResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBulkSuccessResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.isima.bios.models.proto.InsertSuccessResponse responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBulkSuccessResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.InsertBulkSuccessResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.InsertSuccessResponse responses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.InsertBulkSuccessResponse)
  return target;
}

size_t InsertBulkSuccessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.InsertBulkSuccessResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.InsertSuccessResponse responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->_impl_.responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBulkSuccessResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBulkSuccessResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBulkSuccessResponse::GetClassData() const { return &_class_data_; }


void InsertBulkSuccessResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBulkSuccessResponse*>(&to_msg);
  auto& from = static_cast<const InsertBulkSuccessResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.InsertBulkSuccessResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.responses_.MergeFrom(from._impl_.responses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBulkSuccessResponse::CopyFrom(const InsertBulkSuccessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.InsertBulkSuccessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBulkSuccessResponse::IsInitialized() const {
  return true;
}

void InsertBulkSuccessResponse::InternalSwap(InsertBulkSuccessResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responses_.InternalSwap(&other->_impl_.responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBulkSuccessResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[10]);
}

// ===================================================================

class InsertSuccessOrError::_Internal {
 public:
};

InsertSuccessOrError::InsertSuccessOrError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.InsertSuccessOrError)
}
InsertSuccessOrError::InsertSuccessOrError(const InsertSuccessOrError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertSuccessOrError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.server_error_code_){}
    , decltype(_impl_.insert_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_error_code().empty()) {
    _this->_impl_.server_error_code_.Set(from._internal_server_error_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.insert_timestamp_ = from._impl_.insert_timestamp_;
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.InsertSuccessOrError)
}

inline void InsertSuccessOrError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.server_error_code_){}
    , decltype(_impl_.insert_timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertSuccessOrError::~InsertSuccessOrError() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.InsertSuccessOrError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertSuccessOrError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_id_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.server_error_code_.Destroy();
}

void InsertSuccessOrError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertSuccessOrError::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.InsertSuccessOrError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.server_error_code_.ClearToEmpty();
  _impl_.insert_timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertSuccessOrError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.InsertSuccessOrError.event_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 insert_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.insert_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.InsertSuccessOrError.error_message"));
        } else
          goto handle_unusual;
        continue;
      // string server_error_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_server_error_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.InsertSuccessOrError.server_error_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertSuccessOrError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.InsertSuccessOrError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.InsertSuccessOrError.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // int64 insert_timestamp = 2;
  if (this->_internal_insert_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_insert_timestamp(), target);
  }

  // string error_message = 10;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.InsertSuccessOrError.error_message");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_error_message(), target);
  }

  // string server_error_code = 11;
  if (!this->_internal_server_error_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_error_code().data(), static_cast<int>(this->_internal_server_error_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.InsertSuccessOrError.server_error_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_server_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.InsertSuccessOrError)
  return target;
}

size_t InsertSuccessOrError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.InsertSuccessOrError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string error_message = 10;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string server_error_code = 11;
  if (!this->_internal_server_error_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_error_code());
  }

  // int64 insert_timestamp = 2;
  if (this->_internal_insert_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_insert_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertSuccessOrError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertSuccessOrError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertSuccessOrError::GetClassData() const { return &_class_data_; }


void InsertSuccessOrError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertSuccessOrError*>(&to_msg);
  auto& from = static_cast<const InsertSuccessOrError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.InsertSuccessOrError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_server_error_code().empty()) {
    _this->_internal_set_server_error_code(from._internal_server_error_code());
  }
  if (from._internal_insert_timestamp() != 0) {
    _this->_internal_set_insert_timestamp(from._internal_insert_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertSuccessOrError::CopyFrom(const InsertSuccessOrError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.InsertSuccessOrError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertSuccessOrError::IsInitialized() const {
  return true;
}

void InsertSuccessOrError::InternalSwap(InsertSuccessOrError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_error_code_, lhs_arena,
      &other->_impl_.server_error_code_, rhs_arena
  );
  swap(_impl_.insert_timestamp_, other->_impl_.insert_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertSuccessOrError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[11]);
}

// ===================================================================

class InsertBulkErrorResponse::_Internal {
 public:
};

InsertBulkErrorResponse::InsertBulkErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.InsertBulkErrorResponse)
}
InsertBulkErrorResponse::InsertBulkErrorResponse(const InsertBulkErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBulkErrorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_with_error_){from._impl_.results_with_error_}
    , decltype(_impl_.server_error_code_){}
    , decltype(_impl_.server_error_message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_error_code().empty()) {
    _this->_impl_.server_error_code_.Set(from._internal_server_error_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_error_message().empty()) {
    _this->_impl_.server_error_message_.Set(from._internal_server_error_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.InsertBulkErrorResponse)
}

inline void InsertBulkErrorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_with_error_){arena}
    , decltype(_impl_.server_error_code_){}
    , decltype(_impl_.server_error_message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_error_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_error_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertBulkErrorResponse::~InsertBulkErrorResponse() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.InsertBulkErrorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBulkErrorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_with_error_.~RepeatedPtrField();
  _impl_.server_error_code_.Destroy();
  _impl_.server_error_message_.Destroy();
}

void InsertBulkErrorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBulkErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.InsertBulkErrorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_with_error_.Clear();
  _impl_.server_error_code_.ClearToEmpty();
  _impl_.server_error_message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBulkErrorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string server_error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_error_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.InsertBulkErrorResponse.server_error_code"));
        } else
          goto handle_unusual;
        continue;
      // string server_error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.InsertBulkErrorResponse.server_error_message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.isima.bios.models.proto.InsertSuccessOrError results_with_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results_with_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBulkErrorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.InsertBulkErrorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_error_code = 1;
  if (!this->_internal_server_error_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_error_code().data(), static_cast<int>(this->_internal_server_error_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.InsertBulkErrorResponse.server_error_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_error_code(), target);
  }

  // string server_error_message = 2;
  if (!this->_internal_server_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_error_message().data(), static_cast<int>(this->_internal_server_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.InsertBulkErrorResponse.server_error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_error_message(), target);
  }

  // repeated .com.isima.bios.models.proto.InsertSuccessOrError results_with_error = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_with_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_results_with_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.InsertBulkErrorResponse)
  return target;
}

size_t InsertBulkErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.InsertBulkErrorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.InsertSuccessOrError results_with_error = 4;
  total_size += 1UL * this->_internal_results_with_error_size();
  for (const auto& msg : this->_impl_.results_with_error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string server_error_code = 1;
  if (!this->_internal_server_error_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_error_code());
  }

  // string server_error_message = 2;
  if (!this->_internal_server_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_error_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBulkErrorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBulkErrorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBulkErrorResponse::GetClassData() const { return &_class_data_; }


void InsertBulkErrorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBulkErrorResponse*>(&to_msg);
  auto& from = static_cast<const InsertBulkErrorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.InsertBulkErrorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_with_error_.MergeFrom(from._impl_.results_with_error_);
  if (!from._internal_server_error_code().empty()) {
    _this->_internal_set_server_error_code(from._internal_server_error_code());
  }
  if (!from._internal_server_error_message().empty()) {
    _this->_internal_set_server_error_message(from._internal_server_error_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBulkErrorResponse::CopyFrom(const InsertBulkErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.InsertBulkErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBulkErrorResponse::IsInitialized() const {
  return true;
}

void InsertBulkErrorResponse::InternalSwap(InsertBulkErrorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_with_error_.InternalSwap(&other->_impl_.results_with_error_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_error_code_, lhs_arena,
      &other->_impl_.server_error_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_error_message_, lhs_arena,
      &other->_impl_.server_error_message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBulkErrorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[12]);
}

// ===================================================================

class SlidingWindow::_Internal {
 public:
};

SlidingWindow::SlidingWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.SlidingWindow)
}
SlidingWindow::SlidingWindow(const SlidingWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlidingWindow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slide_interval_){}
    , decltype(_impl_.window_slides_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slide_interval_, &from._impl_.slide_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.window_slides_) -
    reinterpret_cast<char*>(&_impl_.slide_interval_)) + sizeof(_impl_.window_slides_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.SlidingWindow)
}

inline void SlidingWindow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slide_interval_){int64_t{0}}
    , decltype(_impl_.window_slides_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SlidingWindow::~SlidingWindow() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.SlidingWindow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlidingWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SlidingWindow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlidingWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.SlidingWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.slide_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.window_slides_) -
      reinterpret_cast<char*>(&_impl_.slide_interval_)) + sizeof(_impl_.window_slides_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlidingWindow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 slide_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.slide_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 window_slides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.window_slides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlidingWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.SlidingWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 slide_interval = 1;
  if (this->_internal_slide_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_slide_interval(), target);
  }

  // int32 window_slides = 2;
  if (this->_internal_window_slides() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_window_slides(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.SlidingWindow)
  return target;
}

size_t SlidingWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.SlidingWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 slide_interval = 1;
  if (this->_internal_slide_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_slide_interval());
  }

  // int32 window_slides = 2;
  if (this->_internal_window_slides() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_window_slides());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlidingWindow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlidingWindow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlidingWindow::GetClassData() const { return &_class_data_; }


void SlidingWindow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlidingWindow*>(&to_msg);
  auto& from = static_cast<const SlidingWindow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.SlidingWindow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_slide_interval() != 0) {
    _this->_internal_set_slide_interval(from._internal_slide_interval());
  }
  if (from._internal_window_slides() != 0) {
    _this->_internal_set_window_slides(from._internal_window_slides());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlidingWindow::CopyFrom(const SlidingWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.SlidingWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlidingWindow::IsInitialized() const {
  return true;
}

void SlidingWindow::InternalSwap(SlidingWindow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlidingWindow, _impl_.window_slides_)
      + sizeof(SlidingWindow::_impl_.window_slides_)
      - PROTOBUF_FIELD_OFFSET(SlidingWindow, _impl_.slide_interval_)>(
          reinterpret_cast<char*>(&_impl_.slide_interval_),
          reinterpret_cast<char*>(&other->_impl_.slide_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlidingWindow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[13]);
}

// ===================================================================

class TumblingWindow::_Internal {
 public:
};

TumblingWindow::TumblingWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.TumblingWindow)
}
TumblingWindow::TumblingWindow(const TumblingWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TumblingWindow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.window_size_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.window_size_ms_ = from._impl_.window_size_ms_;
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.TumblingWindow)
}

inline void TumblingWindow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.window_size_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TumblingWindow::~TumblingWindow() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.TumblingWindow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TumblingWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TumblingWindow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TumblingWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.TumblingWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.window_size_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TumblingWindow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 window_size_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TumblingWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.TumblingWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 window_size_ms = 1;
  if (this->_internal_window_size_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_window_size_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.TumblingWindow)
  return target;
}

size_t TumblingWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.TumblingWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 window_size_ms = 1;
  if (this->_internal_window_size_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_window_size_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TumblingWindow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TumblingWindow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TumblingWindow::GetClassData() const { return &_class_data_; }


void TumblingWindow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TumblingWindow*>(&to_msg);
  auto& from = static_cast<const TumblingWindow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.TumblingWindow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_window_size_ms() != 0) {
    _this->_internal_set_window_size_ms(from._internal_window_size_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TumblingWindow::CopyFrom(const TumblingWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.TumblingWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TumblingWindow::IsInitialized() const {
  return true;
}

void TumblingWindow::InternalSwap(TumblingWindow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.window_size_ms_, other->_impl_.window_size_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TumblingWindow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[14]);
}

// ===================================================================

class Window::_Internal {
 public:
  static const ::com::isima::bios::models::proto::SlidingWindow& sliding(const Window* msg);
  static const ::com::isima::bios::models::proto::TumblingWindow& tumbling(const Window* msg);
};

const ::com::isima::bios::models::proto::SlidingWindow&
Window::_Internal::sliding(const Window* msg) {
  return *msg->_impl_.window_details_.sliding_;
}
const ::com::isima::bios::models::proto::TumblingWindow&
Window::_Internal::tumbling(const Window* msg) {
  return *msg->_impl_.window_details_.tumbling_;
}
void Window::set_allocated_sliding(::com::isima::bios::models::proto::SlidingWindow* sliding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_window_details();
  if (sliding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sliding);
    if (message_arena != submessage_arena) {
      sliding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sliding, submessage_arena);
    }
    set_has_sliding();
    _impl_.window_details_.sliding_ = sliding;
  }
  // @@protoc_insertion_point(field_set_allocated:com.isima.bios.models.proto.Window.sliding)
}
void Window::set_allocated_tumbling(::com::isima::bios::models::proto::TumblingWindow* tumbling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_window_details();
  if (tumbling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tumbling);
    if (message_arena != submessage_arena) {
      tumbling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tumbling, submessage_arena);
    }
    set_has_tumbling();
    _impl_.window_details_.tumbling_ = tumbling;
  }
  // @@protoc_insertion_point(field_set_allocated:com.isima.bios.models.proto.Window.tumbling)
}
Window::Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.Window)
}
Window::Window(const Window& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Window* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){}
    , decltype(_impl_.window_details_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.window_type_ = from._impl_.window_type_;
  clear_has_window_details();
  switch (from.window_details_case()) {
    case kSliding: {
      _this->_internal_mutable_sliding()->::com::isima::bios::models::proto::SlidingWindow::MergeFrom(
          from._internal_sliding());
      break;
    }
    case kTumbling: {
      _this->_internal_mutable_tumbling()->::com::isima::bios::models::proto::TumblingWindow::MergeFrom(
          from._internal_tumbling());
      break;
    }
    case WINDOW_DETAILS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.Window)
}

inline void Window::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){0}
    , decltype(_impl_.window_details_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_window_details();
}

Window::~Window() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.Window)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Window::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_window_details()) {
    clear_window_details();
  }
}

void Window::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Window::clear_window_details() {
// @@protoc_insertion_point(one_of_clear_start:com.isima.bios.models.proto.Window)
  switch (window_details_case()) {
    case kSliding: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.window_details_.sliding_;
      }
      break;
    }
    case kTumbling: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.window_details_.tumbling_;
      }
      break;
    }
    case WINDOW_DETAILS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WINDOW_DETAILS_NOT_SET;
}


void Window::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.Window)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.window_type_ = 0;
  clear_window_details();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Window::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.isima.bios.models.proto.WindowType window_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_window_type(static_cast<::com::isima::bios::models::proto::WindowType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.isima.bios.models.proto.SlidingWindow sliding = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sliding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.isima.bios.models.proto.TumblingWindow tumbling = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tumbling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Window::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.Window)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.isima.bios.models.proto.WindowType window_type = 1;
  if (this->_internal_window_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_window_type(), target);
  }

  // .com.isima.bios.models.proto.SlidingWindow sliding = 10;
  if (_internal_has_sliding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::sliding(this),
        _Internal::sliding(this).GetCachedSize(), target, stream);
  }

  // .com.isima.bios.models.proto.TumblingWindow tumbling = 11;
  if (_internal_has_tumbling()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tumbling(this),
        _Internal::tumbling(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.Window)
  return target;
}

size_t Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.Window)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.isima.bios.models.proto.WindowType window_type = 1;
  if (this->_internal_window_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_window_type());
  }

  switch (window_details_case()) {
    // .com.isima.bios.models.proto.SlidingWindow sliding = 10;
    case kSliding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.window_details_.sliding_);
      break;
    }
    // .com.isima.bios.models.proto.TumblingWindow tumbling = 11;
    case kTumbling: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.window_details_.tumbling_);
      break;
    }
    case WINDOW_DETAILS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Window::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Window::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Window::GetClassData() const { return &_class_data_; }


void Window::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Window*>(&to_msg);
  auto& from = static_cast<const Window&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.Window)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_window_type() != 0) {
    _this->_internal_set_window_type(from._internal_window_type());
  }
  switch (from.window_details_case()) {
    case kSliding: {
      _this->_internal_mutable_sliding()->::com::isima::bios::models::proto::SlidingWindow::MergeFrom(
          from._internal_sliding());
      break;
    }
    case kTumbling: {
      _this->_internal_mutable_tumbling()->::com::isima::bios::models::proto::TumblingWindow::MergeFrom(
          from._internal_tumbling());
      break;
    }
    case WINDOW_DETAILS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Window::CopyFrom(const Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Window::IsInitialized() const {
  return true;
}

void Window::InternalSwap(Window* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.window_type_, other->_impl_.window_type_);
  swap(_impl_.window_details_, other->_impl_.window_details_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Window::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[15]);
}

// ===================================================================

class SelectQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectQuery>()._impl_._has_bits_);
  static const ::com::isima::bios::models::proto::AttributeList& attributes(const SelectQuery* msg);
  static const ::com::isima::bios::models::proto::Dimensions& group_by(const SelectQuery* msg);
  static const ::com::isima::bios::models::proto::OrderBy& order_by(const SelectQuery* msg);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::isima::bios::models::proto::AttributeList&
SelectQuery::_Internal::attributes(const SelectQuery* msg) {
  return *msg->_impl_.attributes_;
}
const ::com::isima::bios::models::proto::Dimensions&
SelectQuery::_Internal::group_by(const SelectQuery* msg) {
  return *msg->_impl_.group_by_;
}
const ::com::isima::bios::models::proto::OrderBy&
SelectQuery::_Internal::order_by(const SelectQuery* msg) {
  return *msg->_impl_.order_by_;
}
SelectQuery::SelectQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.SelectQuery)
}
SelectQuery::SelectQuery(const SelectQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metrics_){from._impl_.metrics_}
    , decltype(_impl_.windows_){from._impl_.windows_}
    , decltype(_impl_.from_){}
    , decltype(_impl_.where_){}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.group_by_){nullptr}
    , decltype(_impl_.order_by_){nullptr}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.distinct_){}
    , decltype(_impl_.on_the_fly_){}
    , decltype(_impl_.limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.where_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.where_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_where().empty()) {
    _this->_impl_.where_.Set(from._internal_where(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::com::isima::bios::models::proto::AttributeList(*from._impl_.attributes_);
  }
  if (from._internal_has_group_by()) {
    _this->_impl_.group_by_ = new ::com::isima::bios::models::proto::Dimensions(*from._impl_.group_by_);
  }
  if (from._internal_has_order_by()) {
    _this->_impl_.order_by_ = new ::com::isima::bios::models::proto::OrderBy(*from._impl_.order_by_);
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.SelectQuery)
}

inline void SelectQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metrics_){arena}
    , decltype(_impl_.windows_){arena}
    , decltype(_impl_.from_){}
    , decltype(_impl_.where_){}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.group_by_){nullptr}
    , decltype(_impl_.order_by_){nullptr}
    , decltype(_impl_.start_time_){int64_t{0}}
    , decltype(_impl_.end_time_){int64_t{0}}
    , decltype(_impl_.distinct_){false}
    , decltype(_impl_.on_the_fly_){false}
    , decltype(_impl_.limit_){0}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.where_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.where_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectQuery::~SelectQuery() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.SelectQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
  _impl_.windows_.~RepeatedPtrField();
  _impl_.from_.Destroy();
  _impl_.where_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attributes_;
  if (this != internal_default_instance()) delete _impl_.group_by_;
  if (this != internal_default_instance()) delete _impl_.order_by_;
}

void SelectQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.SelectQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  _impl_.windows_.Clear();
  _impl_.from_.ClearToEmpty();
  _impl_.where_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.group_by_ != nullptr) {
    delete _impl_.group_by_;
  }
  _impl_.group_by_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.order_by_ != nullptr) {
    delete _impl_.order_by_;
  }
  _impl_.order_by_ = nullptr;
  ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.on_the_fly_) -
      reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.on_the_fly_));
  _impl_.limit_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool distinct = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.distinct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.isima.bios.models.proto.AttributeList attributes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.isima.bios.models.proto.Metric metrics = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string from = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.SelectQuery.from"));
        } else
          goto handle_unusual;
        continue;
      // string where = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_where();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.isima.bios.models.proto.SelectQuery.where"));
        } else
          goto handle_unusual;
        continue;
      // .com.isima.bios.models.proto.Dimensions group_by = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.isima.bios.models.proto.Window windows = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_windows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .com.isima.bios.models.proto.OrderBy order_by = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 limit = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_limit(&has_bits);
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool on_the_fly = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.on_the_fly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.SelectQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_time(), target);
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time(), target);
  }

  // bool distinct = 10;
  if (this->_internal_distinct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_distinct(), target);
  }

  // .com.isima.bios.models.proto.AttributeList attributes = 11;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // repeated .com.isima.bios.models.proto.Metric metrics = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string from = 15;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.SelectQuery.from");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_from(), target);
  }

  // string where = 20;
  if (!this->_internal_where().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_where().data(), static_cast<int>(this->_internal_where().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.isima.bios.models.proto.SelectQuery.where");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_where(), target);
  }

  // .com.isima.bios.models.proto.Dimensions group_by = 30;
  if (this->_internal_has_group_by()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::group_by(this),
        _Internal::group_by(this).GetCachedSize(), target, stream);
  }

  // repeated .com.isima.bios.models.proto.Window windows = 40;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_windows_size()); i < n; i++) {
    const auto& repfield = this->_internal_windows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .com.isima.bios.models.proto.OrderBy order_by = 50;
  if (this->_internal_has_order_by()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::order_by(this),
        _Internal::order_by(this).GetCachedSize(), target, stream);
  }

  // optional int32 limit = 60;
  if (_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(60, this->_internal_limit(), target);
  }

  // bool on_the_fly = 70;
  if (this->_internal_on_the_fly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(70, this->_internal_on_the_fly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.SelectQuery)
  return target;
}

size_t SelectQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.SelectQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.Metric metrics = 12;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.isima.bios.models.proto.Window windows = 40;
  total_size += 2UL * this->_internal_windows_size();
  for (const auto& msg : this->_impl_.windows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string from = 15;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string where = 20;
  if (!this->_internal_where().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_where());
  }

  // .com.isima.bios.models.proto.AttributeList attributes = 11;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  // .com.isima.bios.models.proto.Dimensions group_by = 30;
  if (this->_internal_has_group_by()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_);
  }

  // .com.isima.bios.models.proto.OrderBy order_by = 50;
  if (this->_internal_has_order_by()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_by_);
  }

  // int64 start_time = 1;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_time());
  }

  // bool distinct = 10;
  if (this->_internal_distinct() != 0) {
    total_size += 1 + 1;
  }

  // bool on_the_fly = 70;
  if (this->_internal_on_the_fly() != 0) {
    total_size += 2 + 1;
  }

  // optional int32 limit = 60;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectQuery::GetClassData() const { return &_class_data_; }


void SelectQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectQuery*>(&to_msg);
  auto& from = static_cast<const SelectQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.SelectQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _this->_impl_.windows_.MergeFrom(from._impl_.windows_);
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_where().empty()) {
    _this->_internal_set_where(from._internal_where());
  }
  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::com::isima::bios::models::proto::AttributeList::MergeFrom(
        from._internal_attributes());
  }
  if (from._internal_has_group_by()) {
    _this->_internal_mutable_group_by()->::com::isima::bios::models::proto::Dimensions::MergeFrom(
        from._internal_group_by());
  }
  if (from._internal_has_order_by()) {
    _this->_internal_mutable_order_by()->::com::isima::bios::models::proto::OrderBy::MergeFrom(
        from._internal_order_by());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_distinct() != 0) {
    _this->_internal_set_distinct(from._internal_distinct());
  }
  if (from._internal_on_the_fly() != 0) {
    _this->_internal_set_on_the_fly(from._internal_on_the_fly());
  }
  if (from._internal_has_limit()) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectQuery::CopyFrom(const SelectQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.SelectQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectQuery::IsInitialized() const {
  return true;
}

void SelectQuery::InternalSwap(SelectQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  _impl_.windows_.InternalSwap(&other->_impl_.windows_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.where_, lhs_arena,
      &other->_impl_.where_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectQuery, _impl_.limit_)
      + sizeof(SelectQuery::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(SelectQuery, _impl_.attributes_)>(
          reinterpret_cast<char*>(&_impl_.attributes_),
          reinterpret_cast<char*>(&other->_impl_.attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[16]);
}

// ===================================================================

class SelectRequest::_Internal {
 public:
};

SelectRequest::SelectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.SelectRequest)
}
SelectRequest::SelectRequest(const SelectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queries_){from._impl_.queries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.SelectRequest)
}

inline void SelectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectRequest::~SelectRequest() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.SelectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queries_.~RepeatedPtrField();
}

void SelectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.SelectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.isima.bios.models.proto.SelectQuery queries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.SelectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.SelectQuery queries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.SelectRequest)
  return target;
}

size_t SelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.SelectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.SelectQuery queries = 1;
  total_size += 1UL * this->_internal_queries_size();
  for (const auto& msg : this->_impl_.queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectRequest::GetClassData() const { return &_class_data_; }


void SelectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectRequest*>(&to_msg);
  auto& from = static_cast<const SelectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.SelectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.queries_.MergeFrom(from._impl_.queries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectRequest::CopyFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRequest::IsInitialized() const {
  return true;
}

void SelectRequest::InternalSwap(SelectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.queries_.InternalSwap(&other->_impl_.queries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[17]);
}

// ===================================================================

class QueryResult::_Internal {
 public:
};

QueryResult::QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){from._impl_.records_}
    , decltype(_impl_.window_begin_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.window_begin_time_ = from._impl_.window_begin_time_;
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.QueryResult)
}

inline void QueryResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){arena}
    , decltype(_impl_.window_begin_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.QueryResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
}

void QueryResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.QueryResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  _impl_.window_begin_time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 window_begin_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.window_begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.isima.bios.models.proto.Record records = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.QueryResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 window_begin_time = 1;
  if (this->_internal_window_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_window_begin_time(), target);
  }

  // repeated .com.isima.bios.models.proto.Record records = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.QueryResult)
  return target;
}

size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.QueryResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.Record records = 10;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 window_begin_time = 1;
  if (this->_internal_window_begin_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_window_begin_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResult::GetClassData() const { return &_class_data_; }


void QueryResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryResult*>(&to_msg);
  auto& from = static_cast<const QueryResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.QueryResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  if (from._internal_window_begin_time() != 0) {
    _this->_internal_set_window_begin_time(from._internal_window_begin_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
  swap(_impl_.window_begin_time_, other->_impl_.window_begin_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[18]);
}

// ===================================================================

class SelectQueryResponse::_Internal {
 public:
};

SelectQueryResponse::SelectQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.SelectQueryResponse)
}
SelectQueryResponse::SelectQueryResponse(const SelectQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.definitions_){from._impl_.definitions_}
    , decltype(_impl_.is_windowed_response_){}
    , decltype(_impl_.request_query_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_windowed_response_, &from._impl_.is_windowed_response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_query_num_) -
    reinterpret_cast<char*>(&_impl_.is_windowed_response_)) + sizeof(_impl_.request_query_num_));
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.SelectQueryResponse)
}

inline void SelectQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.definitions_){arena}
    , decltype(_impl_.is_windowed_response_){false}
    , decltype(_impl_.request_query_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectQueryResponse::~SelectQueryResponse() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.SelectQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.definitions_.~RepeatedPtrField();
}

void SelectQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.SelectQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.definitions_.Clear();
  ::memset(&_impl_.is_windowed_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.request_query_num_) -
      reinterpret_cast<char*>(&_impl_.is_windowed_response_)) + sizeof(_impl_.request_query_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.isima.bios.models.proto.QueryResult data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.isima.bios.models.proto.ColumnDefinition definitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_definitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_windowed_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_windowed_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 request_query_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.request_query_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.SelectQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.QueryResult data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.isima.bios.models.proto.ColumnDefinition definitions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_definitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_definitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_windowed_response = 3;
  if (this->_internal_is_windowed_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_windowed_response(), target);
  }

  // int32 request_query_num = 4;
  if (this->_internal_request_query_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_request_query_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.SelectQueryResponse)
  return target;
}

size_t SelectQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.SelectQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.QueryResult data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.isima.bios.models.proto.ColumnDefinition definitions = 2;
  total_size += 1UL * this->_internal_definitions_size();
  for (const auto& msg : this->_impl_.definitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_windowed_response = 3;
  if (this->_internal_is_windowed_response() != 0) {
    total_size += 1 + 1;
  }

  // int32 request_query_num = 4;
  if (this->_internal_request_query_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_query_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectQueryResponse::GetClassData() const { return &_class_data_; }


void SelectQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectQueryResponse*>(&to_msg);
  auto& from = static_cast<const SelectQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.SelectQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.definitions_.MergeFrom(from._impl_.definitions_);
  if (from._internal_is_windowed_response() != 0) {
    _this->_internal_set_is_windowed_response(from._internal_is_windowed_response());
  }
  if (from._internal_request_query_num() != 0) {
    _this->_internal_set_request_query_num(from._internal_request_query_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectQueryResponse::CopyFrom(const SelectQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.SelectQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectQueryResponse::IsInitialized() const {
  return true;
}

void SelectQueryResponse::InternalSwap(SelectQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.definitions_.InternalSwap(&other->_impl_.definitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectQueryResponse, _impl_.request_query_num_)
      + sizeof(SelectQueryResponse::_impl_.request_query_num_)
      - PROTOBUF_FIELD_OFFSET(SelectQueryResponse, _impl_.is_windowed_response_)>(
          reinterpret_cast<char*>(&_impl_.is_windowed_response_),
          reinterpret_cast<char*>(&other->_impl_.is_windowed_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[19]);
}

// ===================================================================

class SelectResponse::_Internal {
 public:
};

SelectResponse::SelectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.isima.bios.models.proto.SelectResponse)
}
SelectResponse::SelectResponse(const SelectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){from._impl_.responses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.isima.bios.models.proto.SelectResponse)
}

inline void SelectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectResponse::~SelectResponse() {
  // @@protoc_insertion_point(destructor:com.isima.bios.models.proto.SelectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responses_.~RepeatedPtrField();
}

void SelectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.isima.bios.models.proto.SelectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.isima.bios.models.proto.SelectQueryResponse responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.isima.bios.models.proto.SelectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.SelectQueryResponse responses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.isima.bios.models.proto.SelectResponse)
  return target;
}

size_t SelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.isima.bios.models.proto.SelectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.isima.bios.models.proto.SelectQueryResponse responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->_impl_.responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectResponse::GetClassData() const { return &_class_data_; }


void SelectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectResponse*>(&to_msg);
  auto& from = static_cast<const SelectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.isima.bios.models.proto.SelectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.responses_.MergeFrom(from._impl_.responses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectResponse::CopyFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.isima.bios.models.proto.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResponse::IsInitialized() const {
  return true;
}

void SelectResponse::InternalSwap(SelectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responses_.InternalSwap(&other->_impl_.responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table__5fbios_2fdata_2eproto_getter, &descriptor_table__5fbios_2fdata_2eproto_once,
      file_level_metadata__5fbios_2fdata_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace models
}  // namespace bios
}  // namespace isima
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::Uuid*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::Uuid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::Uuid >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::Dimensions*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::Dimensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::Dimensions >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::OrderBy*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::OrderBy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::OrderBy >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::Metric*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::ColumnDefinition*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::ColumnDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::ColumnDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::AttributeList*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::AttributeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::AttributeList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::Record*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::Record >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::InsertRequest*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::InsertSuccessResponse*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::InsertSuccessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::InsertSuccessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::InsertBulkRequest*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::InsertBulkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::InsertBulkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::InsertBulkSuccessResponse*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::InsertBulkSuccessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::InsertBulkSuccessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::InsertSuccessOrError*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::InsertSuccessOrError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::InsertSuccessOrError >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::InsertBulkErrorResponse*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::InsertBulkErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::InsertBulkErrorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::SlidingWindow*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::SlidingWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::SlidingWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::TumblingWindow*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::TumblingWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::TumblingWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::Window*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::Window >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::Window >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::SelectQuery*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::SelectQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::SelectQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::SelectRequest*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::SelectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::SelectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::QueryResult*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::QueryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::QueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::SelectQueryResponse*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::SelectQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::SelectQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::isima::bios::models::proto::SelectResponse*
Arena::CreateMaybeMessage< ::com::isima::bios::models::proto::SelectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::isima::bios::models::proto::SelectResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
