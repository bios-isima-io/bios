/*
 * Copyright (C) 2025 Isima, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.isima.bios.deli.utils;

import io.isima.bios.deli.models.InvalidConfigurationException;
import io.isima.bios.utils.TrustStoreConverter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.security.GeneralSecurityException;
import java.util.Objects;
import lombok.Getter;
import org.slf4j.Logger;

/**
 * Root CA trust store generated by a root CA PEM.
 */
@Getter
public class RootCA {
  private final String rootCaFileName;
  private final byte[] rootCaPemData;
  private boolean generated = false;

  // This is an internal file and root CA is a public key.
  // We don't need security for this truststore, we make up some secrets
  private final String trustStorePassword = "secret";
  private final String alias = "rootCA";

  public RootCA(String rootCaFileName, byte[] rootCaPemData) {
    this.rootCaFileName = Objects.requireNonNull(rootCaFileName);
    this.rootCaPemData = Objects.requireNonNull(rootCaPemData);
  }

  /**
   * Generate a truststore and save it to the configured file.
   */
  public void generateTrustStore(Logger logger) throws InvalidConfigurationException {
    if (generated) {
      // we don't generate twice
      return;
    }
    try {
      TrustStoreConverter.convertPemToTrustStore(rootCaPemData, rootCaFileName,
          trustStorePassword, alias);
      logger.info("Generated truststore from root CA PEM; truststore={}, password={}, alias={}",
          rootCaFileName, trustStorePassword, alias);
    } catch (GeneralSecurityException e) {
      throw new InvalidConfigurationException("Failed to convert root CA pem to truststore", e);
    } catch (IOException e) {
      // something is utterly wrong, abort
      throw new RuntimeException(e);
    }
    generated = true;
  }

  /**
   * Save the root PEM to the configured file.
   */
  public void saveRootPem(Logger logger) throws IOException {
    final var truststoreFile = new File(rootCaFileName);
    Files.write(truststoreFile.toPath(), rootCaPemData, StandardOpenOption.CREATE,
        StandardOpenOption.TRUNCATE_EXISTING);
    logger.info("Saved root CA PEM; file={}", rootCaFileName);
  }
}
